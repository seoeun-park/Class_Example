#include <iostream>

using std::cout;
using std::cin;
using std::endl;
///*
// 간단한 클래스 sample
class Sample {

private:
	// 멤버 변수(member variable)
	int data;

public:

	// 멤버 함수(member function)

	// 생성자(constructor)
	// → 객체가 생성될 때 자동으로 호출되는 멤버 함수
	// → 생성자를 호출할 수 없으면 객체가 생성되지 않는다.(중요)
	// → 생성자는 객체가 동작할 수 있도록 준비하는 과정을 처리한다.
	//	  따라서 생성자에서는 반드시 멤버 변수를 초기화 시켜야 한다.(중요)
	//	  왜냐하면 객체가 생성됨과 동시에 멤버 변수의 저장 공간이 할당되므로
	// → 생성자의 식별자는 클래스의 식별자와 같다.
	// → 생성자 또한 멤버 함수이므로 함수 오버로딩(function overloading)을 할 수 있다.
	// → 생성자는 반환값이 없는 함수이다.

	// 멤버 초기화 리스트(member initialisation list)
	// → 생성자의 매개변수 목록 다음에 콜론을 쓰고 그 다음에서 멤버변수를 초기화시킨다.
	// → 멤버 초기화 리스트에 지정해놓은 멤버 변수의 초기화가 진행된 다음에 생성자의 본체가 실행
	// → 상수 멤버, 참조자 멤버, 객체 멤버, 기초 클래스의 멤버 변수는 반드시 멤버 초기화 리스트에서
	//	  초기화시켜야 한다.

	// 생성자의 매개변수는 객체를 생성할때 초기화시키는 값을 전달 받는다.
	Sample (int n) : data(n) {}

	// 생성자를 정의한 경우에는 기본 생성자의 역할을 수행할 즉 초기화시키는 값 없이 객체를
	// 생성할 수 있는 생성자를 정의해야 한다.
	// 이때 멤버 변수는 반드시 초기화시키도록 하고, 0으로 초기화시키면 된다
	// 방법 1. 함수 오버로딩
	// 방법 2. 매개 변수의 기본값
	// Sample() : data(0) {}

	// 1. 함수 오버로딩(function overloading)
	// → 매개변수의 개수나 자료형이 다르면 같은 식별자를 가지는 함수가 존재할 수 있다.

	// 2. 매개변수의 기본 값
	Sample(int n = 0) : data(n) {}

	// 기본 생성자(default constructor)
	// → 클래스에 생성자가 없으면 컴파일러가 추가해주는 생성자
	// → 클래스에 생성자가 있으면 기본 생성자는 추가되지 않는다.
	// Sample() {}		→ 이렇게 생김

	// 소멸자(destructor)
	// → 객체가 소멸될때 자동으로 호출되는 멤버 함수
	// → 소멸자는 객체가 소멸되기 전에 객체에서 사용했던 시스템 자원 등을 정리하는 역할을 수행
	// → 소멸자의 식별자는 클래스 식별자 앞에 틸드(~) 문자를 붙여서 작성
	// → 소멸자는 반환값이 없고 매개변수도 없는 함수이다.
	//	  그래서 소멸자는 함수 오버로딩도 할수없고 매개변수의 기본값도 쓸 수없다
	//	  따라서 소멸자는 클래스에서 하나만 존재한다.

	// 기본 소멸자(defaule destructor)
	// → 클래스에서 소멸자가 정의되어있지 않으면 컴파일러가 자동으로 소멸자를 추가한다.
	// ~Sample() {}

	// 따로 뒤처리가 필요하지 않는 경우에는 따로 소멸자를 정의하지 않는다.

	//------------------------------------------------------------------------
	// 생성자와 소멸자의 접근 제어
	// → 객체는 클래스 외부에서 생성하고 소멸되므로 반드시 public 멤버로 지정해야 한다.

	// 설정자(setter)
	void SetData(int n) { data = n; }

	// 접근자(getter)
	int GetData() { return data; }
	
	// 기타 기능
	void Print() { cout << "data = " << data << endl; }
};
int main() {

	// C++ 언어에서 변수를 초기화시키는 표현식
	// int num = 10;
	// → int num(10);

	// 객체 생성
	// → 객체가 생성될 때 생성자(constructor)라고 부르는 멤버 함수가 자동으로 호출된다.
	// → Sample obj(10);
	// → 객체를 생성할 때 초기화시키면 그 값은 생성자에 전달된다.
	Sample obj(10);
	// Sample obj = 10;와 같은 의미
	// (생성자를 따로 작성하지 않을 때에) 위 문장에서는 10으로 초기화시키라고 하고 이 값은 생성자에 전달된다.
	// 하지만 이것을 받아서 실행될 생성자를 따로 정의하지 않으면 기본 생성자가 호출되고 기본 생성자는
	// 매개 변수가 없기 때문에 객체는 생성되지 않는다.

	// 객체가 생성되는 순서
	// → 1. 생성자 호출
	// → 2. 생성자의 멤버 초기화 리스트에서 작성해놓은 멤버 변수의 초기화
	// → 3. 생성자의 본체가 실행

	// Sample obj2;
	// 초기화 시켜주는 값이 없는 경우 기본 생성자 호출해야 하는데 기본 생성자가 없기 때문에(이미 정의된 생성자가 있을 경우)

	obj.Print();

	// 지역 변수(local variable)
	// → 블록 내부에서 선언한 변수
	// → 선언한 블록 내부에서만 유효하며 선언한 블록이 종료되면 지역 변수는 소멸된다.
	// → 객체는 소멸될 때는 소멸자(destructor)라고 부르는 멤버 함수가 호출된다. 


	return 0;
}
//*/