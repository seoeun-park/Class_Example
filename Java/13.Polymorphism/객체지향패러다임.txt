○ 상속(Inheritance)
	- 상위 클래스(Super)로부터 하위(Sub) 클래스가 상태 정보(멤버 변수, 필드), 행위 정보(메소드)를 물려 받는 것.
	- 일반적으로 행위정보(메소드)를 상속
	- 하위 클래스에서는 상속받은 상태 정보 및 행위 정보를 추가할 수 있다. → Override(재정의, 수정) 
	- 하위 클래스에서 부모 클래스를 상속받기 위해서는 extends 키워드를 활용한다.   ▶  public class A extends B ▶  A(자식) → B(부모)
	- JAVA는 단일 상속만 허용된다. ▶  B라는 클래스를 상속받게 된다면 다른 클래스를 상속받을 수 없게 됨.
	- JAVA에서 이러한 문제점을 해결하기 위하여 인터페이스(Interface)가 등장하게 된다.

○ 다형성(Polymorphism) : 추상화(Abstract)
	- 하위 클래스마다 공통적인 행위 정보(메소드)가 존재   → 추상 메소드 구현  ▶  추상 클래스(abstract)
	- 상속의 전제 조건에서 반드시 메소드의 재정의(Override)가 필수
	- 하위 클래스의 구체적인 동작 방식을 몰라도 상위 클래스가 동작 시킬 수 있다. : UpCasting 객체 생성
	- 하위 클래스의 동작이 수정되더라도 사용하는 쪽에서는 영향을 미치지 않는다.
	- 상위 클래스가 동일한 메세지로 하위 클래스를 서로 다르게 동작시키는 객체지향 개념
		예) 부모가 자식에게 꽃을 사와라(동일한 지시 / 명령)
			# 큰 아들 : 인터넷 주문을 통해 꽃 배달을 이용하여 꽃을 사온다.
			# 딸 : 남자친구에게 부탁하여 꽃을 사온다.
			# 막내 아들 : 직접 꽃집에 가서 꽃을 사온다.
	- 유지보수, 확장성이 좋아진다.

○ 인터페이스(Interface)
	- JAVA는 단일 상속만 허용  ▶  다중 상속의 이점을 활용할 필요성  ▶  interface 구현
	- 모든 메소드는 추상 메소드로만 구성된다.
	- 상속받은 하위 클래스에서는 반드시 재정의가 필수다.
	- interface의 상속은 implements 키워드를 사용한다.
	
